{
  "swagger": "2.0",
  "info": {
    "title": "Flask API",
    "description": "Swagger documentation for the Flask API",
    "version": "1.0"
  },
  "basePath": "/",
  "tags": [
    {
      "name": "Users",
      "description": "Operations related to users"
    },
    {
      "name": "Content",
      "description": "Operations related to content"
    },
    {
      "name": "Coordinator",
      "description": "Operations related to Two-Phase Commit"
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users from PostgreSQL and MongoDB",
        "responses": {
          "200": {
            "description": "Returns a list of users from PostgreSQL and MongoDB",
            "schema": {
              "type": "object",
              "properties": {
                "PostgreSQL Users": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      }
                    }
                  }
                },
                "MongoDB Users": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      }
                    }
                  }
                },
                "Redis Users": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new user in PostgreSQL",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User created successfully"
          },
          "500": {
            "description": "Error creating user"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user's email in PostgreSQL",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "500": {
            "description": "Error updating user"
          }
        }
      }
    },
    "/mongo-data": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Create new content in MongoDB",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data inserted successfully"
          },
          "500": {
            "description": "Error inserting data"
          }
        }
      }
    },
    "/content": {
      "get": {
        "tags": [
          "Content"
        ],
        "summary": "Get all content from MongoDB",
        "responses": {
          "200": {
            "description": "Returns a list of content from MongoDB",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "_id": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Update content in MongoDB",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "content": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Content updated successfully"
          },
          "500": {
            "description": "Error updating content"
          }
        }
      }
    },
    "/two-phase-commit": {
      "post": {
        "tags": [
          "Coordinator"
        ],
        "summary": "Check status for Two-Phase Commit",
        "responses": {
          "200": {
            "description": "Can commit, 200 OK"
          },
          "500": {
            "description": "Cannot commit, offline databases listed",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                },
                "offline_databases": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
